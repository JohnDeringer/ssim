<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:jaxws="http://cxf.apache.org/jaxws"  
xmlns:soap="http://cxf.apache.org/bindings/soap"
xmlns:security="http://www.springframework.org/schema/security"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:mvc="http://www.springframework.org/schema/mvc"
xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
http://cxf.apache.org/jaxws 
	http://cxf.apache.org/schemas/jaxws.xsd
http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.0.xsd
http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
">
 
 <!-- Enable reflection to find out SpringMVC controller classes  -->
<context:component-scan base-package="org.nterlearning.usermgmt.webapp"/>

<!-- This grabs the properties file specified by env var NTER_PROPS and subs all the ${} values into strings from 
the properties file -->
<context:property-placeholder location="file:///${NTER_PROPS}"/>

<!-- Allows us to determine the locale for internationalization -->
<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <property name="defaultLocale" value="${usermgmt.default.locale}" />
</bean>

<!--  
<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
          <property name="basename" value="nter_messages" />
</bean>
-->

<!-- Set a source for the messages. We are using our own extension of the ResourceBundleMessageSource
to add ability to search the filesystem for overrides -->
<bean id="messageSource" class="org.nterlearning.usermgmt.webapp.utils.NTERResourceBundleMessageSource">
          <property name="basename" value="nter_messages" />
          <property name="location" value="${usermgmt.messages.location}"/>
</bean>

<!-- Enables to detect when the locale is changed -->
<bean id="localeChangeInterceptor"
		class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<property name="paramName" value="locale" />
	</bean>
 
	<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" >
		<property name="interceptors">
		   <list>
			<ref bean="localeChangeInterceptor" />
		   </list>
		</property>
	</bean>

<!-- simple value container object for getting config values into the app -->
<bean id="bean_Config"
	class="org.nterlearning.usermgmt.webapp.utils.ConfigurableParams">
	<property name="url" value="${usermgmt.default.url}"/>
	<property name="loginUrl" value="${usermgmt.login.url}"/>
	<property name="ldapGroup" value="${usermgmt.ldap.group}"/>
	<property name="supportEmail" value="${usermgmt.mail.support}"/>
</bean>

<!-- Mail sender used to notifiy users through email -->
<bean id="bean_mailSender"
	class="org.springframework.mail.javamail.JavaMailSenderImpl">
	<property name="host" value="${usermgmt.mail.host}" /> 
	<property name="port" value="${usermgmt.mail.port}" />
	<property name="username" value="${usermgmt.mail.username}" />
	<property name="password" value="${usermgmt.mail.password}" />
	<property name="javaMailProperties">
    <props>
        <prop key="mail.smtp.starttls.enable">${usermgmt.mail.starttls.enable}</prop>
        <prop key="mail.smtp.auth">${usermgmt.mail.auth}</prop>
    </props>
    </property>
</bean>

<!-- Wrapper object to sending notifications -->

<bean id="bean_UserAccountNotifier"
	class="org.nterlearning.usermgmt.model.UserAccountNotifierImpl">
	
	<property name="mailSender" ref="bean_mailSender" />
	<property name="genericMailWithSubject" ref="bean_Email" />
	<property name="passwordResetTemplateName" value="${usermgmt.mail.password.reset.template}"/>
	<property name="newUserEmailTemplateName" value="${usermgmt.mail.verify.template}"/>
	<property name="emailChangeTemplateName" value="${usermgmt.email.change.template}"/>
	<property name="overrideDir" value="${usermgmt.template.dir}"/>
</bean>

<!-- email template used to build up emails -->
<bean id="bean_Email"
	class="org.springframework.mail.SimpleMailMessage">
	<property name="from" value="${usermgmt.mail.username}" />
</bean>

<!-- main LDAP context object needed for persistence layer -->
<bean id="bean_contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
	<property name="url" value="${usermgmt.ldap.url}" />
	<property name="base" value="${usermgmt.ldap.base}" />
	<property name="userDn" value="${usermgmt.ldap.userDn}" />
	<property name="password" value="${usermgmt.ldap.password}" />
</bean>

<!-- LDAP template for persistence -->
<bean id="bean_ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
	<constructor-arg ref="bean_contextSource" />
</bean>

<bean id="bean_user" class="org.nterlearning.usermgmt.model.UserImpl" scope="prototype"/>

<!-- our DAO layer which isolates persistence mechanism -->
<bean id="bean_personDao" class="org.nterlearning.usermgmt.persistence.UserDaoImpl">
	<property name="ldapTemplate" ref="bean_ldapTemplate" />
</bean>

<bean id="bean_contextLookup" class="org.nterlearning.usermgmt.webapp.utils.NTERContextLookup"/>
 
 <!-- Tell SpringMVC to use annotations for locating controllers -->
<mvc:annotation-driven/>

<!-- Allows us to map from simple view names (returned by controllers) onto JSP files -->
<bean id="viewResolver"
      class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    <property name="prefix" value="/jsp/"/>
    <property name="suffix" value=".jsp"/>
</bean>

<!-- implemenation of the password validator to inject -->
<bean id="bean_passwordValidator" class="${usermgmt.password.validator}"/>

<!-- implementation of the email validator to inject -->
<bean id="bean_emailValidator" class="${usermgmt.email.validator}"/>

<!--  map the resources in the WAR so they can be served up by the web server -->
<mvc:resources mapping="/resources/**" location="/resources/"/>

</beans>